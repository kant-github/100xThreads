generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                   Int                       @id @default(autoincrement())
  name                 String
  email                String                    @unique
  bio                  String                    @default("")
  provider             String
  oauth_id             String
  image                String?
  created_at           DateTime                  @default(now())
  isOnline             Boolean                   @default(false)
  lastSeen             DateTime?
  Organizations        OrganizationUsers[]
  OwnedOrganizations   Organization[]
  Chats                Chats[]
  RecentlyJoinedGroups RecentlyJoinedGroups[]
  LikedMessages        LikedUser[]
  EventAttendee        EventAttendee[]
  Channel              Channel[]
  WelcomedChannels     WelcomedUser[]
  EventChannel         EventChannel[]
  JoinRequests         OrganizationJoinRequest[]
  CreatedInvites       OrganizationInvite[]      @relation("InviteCreator")
  UsedInvites          OrganizationInvite[]      @relation("InviteUser")
  ChatReaction         ChatReaction[]
  PollVote             PollVote[]
  Poll                 Poll[]
  ProjectChat          ProjectChat[]

  @@map("users")
}

model Organization {
  id                String                    @id @default(uuid()) @db.Uuid
  name              String                    @db.VarChar(191)
  description       String?                   @default("This is the default description for your organization ðŸŒ»")
  owner             Users                     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id          Int
  access_type       OrganizationAccessType    @default(PRIVATE)
  privateFlag       Boolean                   @default(false)
  passwordHash      String?                   @db.VarChar(191)
  passwordSalt      String?
  image             String?                   @db.VarChar(191)
  organizationColor String?                   @db.VarChar(7)
  organization_type OrganizationType
  created_at        DateTime                  @default(now())
  tags              String[]                  @default([]) @db.VarChar(50)
  Channels          Channel[]
  EventChannel      EventChannel[]
  OrganizationUsers OrganizationUsers[]
  WelcomeChannel    WelcomeChannel?
  JoinRequests      OrganizationJoinRequest[]
  Invites           OrganizationInvite[]

  @@unique([name, owner_id])
  @@map("organizations")
}

model OrganizationJoinRequest {
  id              Int           @id @default(autoincrement())
  organization    Organization  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String        @db.Uuid
  user            Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         Int
  status          RequestStatus @default(PENDING)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  response_note   String?

  @@unique([organization_id, user_id])
  @@map("organization_join_requests")
}

model OrganizationInvite {
  id              Int          @id @default(autoincrement())
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String       @db.Uuid
  code            String       @unique
  created_by      Users        @relation("InviteCreator", fields: [created_by_id], references: [id])
  created_by_id   Int
  used_by         Users?       @relation("InviteUser", fields: [used_by_id], references: [id])
  used_by_id      Int?
  expires_at      DateTime
  max_uses        Int          @default(1)
  used_count      Int          @default(0)
  created_at      DateTime     @default(now())

  @@index([code])
  @@map("organization_invites")
}

model OrganizationUsers {
  id                   Int             @id @default(autoincrement())
  organization         Organization    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id      String          @db.Uuid
  user                 Users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id              Int
  role                 UserRole        @default(MEMBER)
  joined_at            DateTime        @default(now())
  CreatedAnnouncements Announcement[]
  Chats                Chats[]
  Issues               Issues[]
  TaskAssignees        TaskAssignees[]
  ProjectChat          ProjectChat[]

  @@unique([organization_id, user_id])
  @@map("organization_users")
}

model Channel {
  id                   String                 @id @default(uuid()) @db.Uuid
  organization         Organization           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id      String                 @db.Uuid
  title                String                 @db.VarChar(191)
  type                 ChannelType            @default(GENERAL)
  passcode             String?                @db.VarChar(20)
  groupImage           String?
  created_at           DateTime               @default(now())
  created_by           Int?
  creator              Users?                 @relation(fields: [created_by], references: [id])
  is_archived          Boolean                @default(false)
  allowed_roles        UserRole[]             @default([MEMBER])
  description          String?
  Chats                Chats[]
  Announcements        Announcement[]
  RecentlyJoinedGroups RecentlyJoinedGroups[]
  Poll                 Poll[]
  Issues               Issues[]
  Project              Project[]

  @@index([organization_id, created_at])
  @@map("chat_groups")
}

model EventChannel {
  id              String       @id @default(uuid()) @db.Uuid
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String       @db.Uuid
  title           String       @db.VarChar(191)
  description     String?
  created_at      DateTime     @default(now())
  created_by      Int?
  creator         Users?       @relation(fields: [created_by], references: [id])
  events          Event[]

  @@index([organization_id])
  @@map("event_rooms")
}

model WelcomeChannel {
  id              String         @id @default(uuid()) @db.Uuid
  organization    Organization   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  organization_id String         @unique @db.Uuid
  welcome_message String?
  welcomed_users  WelcomedUser[]
  role_requests   RoleRequest[]
  created_at      DateTime       @default(now())

  @@map("welcome_channels")
}

model WelcomedUser {
  id                 String         @id @default(uuid()) @db.Uuid
  welcome_channel    WelcomeChannel @relation(fields: [welcome_channel_id], references: [id], onDelete: Cascade)
  welcome_channel_id String         @db.Uuid
  user_id            Int
  user               Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message            String?
  welcomed_at        DateTime       @default(now())

  @@unique([welcome_channel_id, user_id])
  @@map("welcomed_users")
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  channel     Channel       @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id  String        @db.Uuid
  title       String        @db.VarChar(191)
  description String?
  created_at  DateTime      @default(now())
  due_date    DateTime      @default(now())
  tasks       Tasks[]
  ProjectChat ProjectChat[]

  @@index([channel_id])
  @@map("projects")
}

model ProjectChat {
  id                String            @id @default(uuid()) @db.Uuid
  project           Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id        String            @db.Uuid
  organization_user OrganizationUsers @relation(fields: [organization_id, org_user_id], references: [organization_id, user_id], onDelete: Cascade)
  organization_id   String            @db.Uuid
  org_user_id       Int
  message           String?
  name              String
  is_deleted        Boolean           @default(false)
  deleted_at        DateTime?
  is_edited         Boolean           @default(false)
  edited_at         DateTime?
  created_at        DateTime          @default(now())
  LikedUsers        LikedUser[]
  Users             Users?            @relation(fields: [usersId], references: [id])
  usersId           Int?
  ChatReaction      ChatReaction[]

  @@index([created_at])
  @@index([project_id])
  @@index([organization_id, org_user_id])
  @@map("project_chats")
}

model Tasks {
  id          String          @id @default(uuid()) @db.Uuid
  project     Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id  String          @db.Uuid
  title       String          @db.VarChar(191)
  description String?
  color       String?
  tags        String[]        @default([]) @db.VarChar(50)
  status      CardStatus      @default(TODO)
  priority    Priority        @default(NORMAL)
  due_date    DateTime?
  created_at  DateTime        @default(now())
  assignees   TaskAssignees[]

  @@index([project_id])
  @@map("tasks")
}

model TaskAssignees {
  id                Int               @id @default(autoincrement())
  task              Tasks             @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id           String            @db.Uuid
  organization_user OrganizationUsers @relation(fields: [org_user_id], references: [id], onDelete: Cascade)
  org_user_id       Int
  assigned_at       DateTime          @default(now())

  @@unique([task_id, org_user_id])
  @@map("task_assignees")
}

model RoleRequest {
  id                 String         @id @default(uuid()) @db.Uuid
  welcome_channel    WelcomeChannel @relation(fields: [welcome_channel_id], references: [id])
  welcome_channel_id String         @db.Uuid
  user_id            Int
  requested_role     UserRole
  status             RequestStatus  @default(PENDING)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt

  @@map("role_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Poll {
  id              String       @id @default(uuid()) @db.Uuid
  channel         Channel      @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id      String       @db.Uuid
  question        String
  options         PollOption[]
  creator         Users        @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id      Int
  created_at      DateTime     @default(now())
  expires_at      DateTime?
  is_anonymous    Boolean      @default(false)
  multiple_choice Boolean      @default(false)
  status          PollStatus   @default(ACTIVE)
  votes           PollVote[]

  @@index([channel_id, created_at])
  @@map("polls")
}

model PollOption {
  id         String     @id @default(uuid()) @db.Uuid
  poll       Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_id    String     @db.Uuid
  text       String
  votes      PollVote[]
  created_at DateTime   @default(now())

  @@map("poll_options")
}

model PollVote {
  id         Int        @id @default(autoincrement())
  poll       Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_id    String     @db.Uuid
  option     PollOption @relation(fields: [option_id], references: [id], onDelete: Cascade)
  option_id  String     @db.Uuid
  user       Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  created_at DateTime   @default(now())

  @@unique([poll_id, user_id])
  @@map("poll_votes")
}

enum PollStatus {
  ACTIVE
  ENDED
  CANCELLED
}

model Announcement {
  id                  String            @id @default(uuid()) @db.Uuid
  channel             Channel           @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id          String            @db.Uuid
  title               String
  content             String
  priority            Priority          @default(NORMAL)
  tags                String[]          @default([])
  creator             OrganizationUsers @relation(fields: [creator_org_user_id], references: [id], onDelete: Cascade)
  creator_org_user_id Int
  created_at          DateTime          @default(now())
  expires_at          DateTime?
  is_pinned           Boolean           @default(false)
  requires_ack        Boolean           @default(false)
  AckStatus           AnnouncementAck[]

  @@index([channel_id, created_at])
  @@map("announcements")
}

model AnnouncementAck {
  id              Int          @id @default(autoincrement())
  announcement    Announcement @relation(fields: [announcement_id], references: [id], onDelete: Cascade)
  announcement_id String       @db.Uuid
  user_id         Int
  acked_at        DateTime     @default(now())

  @@unique([announcement_id, user_id])
  @@map("announcement_acknowledgments")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Chats {
  id                String            @id @default(uuid()) @db.Uuid
  channel           Channel           @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id        String            @db.Uuid
  organization_user OrganizationUsers @relation(fields: [organization_id, org_user_id], references: [organization_id, user_id], onDelete: Cascade)
  organization_id   String            @db.Uuid
  org_user_id       Int
  message           String?
  name              String
  is_deleted        Boolean           @default(false)
  deleted_at        DateTime?
  is_edited         Boolean           @default(false)
  edited_at         DateTime?
  created_at        DateTime          @default(now())
  LikedUsers        LikedUser[]
  Users             Users?            @relation(fields: [usersId], references: [id])
  usersId           Int?
  ChatReaction      ChatReaction[]

  @@index([created_at])
  @@index([channel_id])
  @@index([organization_id, org_user_id])
  @@map("chats")
}

model ChatReaction {
  id            String       @id @default(uuid()) @db.Uuid
  chat          Chats        @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  chat_id       String       @db.Uuid
  emoji         String
  count         Int          @default(1)
  Users         Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  created_at    DateTime     @default(now())
  ProjectChat   ProjectChat? @relation(fields: [projectChatId], references: [id])
  projectChatId String?      @db.Uuid
}

model Issues {
  id                String            @id @default(uuid()) @db.Uuid
  channel           Channel           @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  channel_id        String            @db.Uuid
  organization_user OrganizationUsers @relation(fields: [organization_id, org_user_id], references: [organization_id, user_id], onDelete: Cascade)
  organization_id   String            @db.Uuid
  org_user_id       Int

  title       String
  description String
  status      IssueStatus @default(OPEN)
  priority    Priority    @default(NORMAL)

  @@index([channel_id])
  @@index([organization_id, org_user_id])
  @@index([status])
  @@map("issues")
}

model LikedUser {
  id            Int          @id @default(autoincrement())
  message       Chats        @relation(fields: [message_id], references: [id], onDelete: Cascade)
  message_id    String       @db.Uuid
  username      String       @default("")
  user          Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  created_at    DateTime     @default(now())
  ProjectChat   ProjectChat? @relation(fields: [projectChatId], references: [id])
  projectChatId String?      @db.Uuid

  @@unique([message_id, user_id])
  @@map("liked_users")
}

model RecentlyJoinedGroups {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  group     Channel  @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id  String   @db.Uuid
  joined_at DateTime @default(now())

  @@unique([user_id, group_id])
  @@map("recently_joined_groups")
}

model Event {
  id            String       @id @default(uuid()) @db.Uuid
  event_room    EventChannel @relation(fields: [event_room_id], references: [id], onDelete: Cascade)
  event_room_id String       @db.Uuid
  title         String       @db.VarChar(191)
  description   String?
  start_time    DateTime
  end_time      DateTime?
  location      String?
  status        EventStatus  @default(PENDING)
  rsvp_count    Int          @default(0)
  created_at    DateTime     @default(now())
  created_by    Int

  attendees EventAttendee[]

  @@index([event_room_id, start_time])
  @@map("events")
}

model EventAttendee {
  id       Int        @id @default(autoincrement())
  user     Users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  Int
  event    Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id String     @db.Uuid
  status   RSVPStatus

  @@unique([user_id, event_id])
  @@map("event_attendees")
}

enum RSVPStatus {
  GOING
  MAYBE
  NOT_GOING
}

enum OrganizationType {
  COMMUNITY
  STARTUP
  CORPORATE
  NON_PROFIT
  EDUCATIONAL
  GOVERNMENT
  OTHER
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  PENDING_INFO
  PENDING_REVIEW
  RESOLVED
  CLOSED
  REOPENED
}

enum EventStatus {
  PENDING
  LIVE
  COMPLETED
  CANCELED
}

enum UserRole {
  ADMIN
  EVENT_MANAGER
  MODERATOR
  MEMBER
  GUEST
  ORGANIZER
  OBSERVER
  IT_SUPPORT
  HR_MANAGER
  FINANCE_MANAGER
}

enum ChannelType {
  WELCOME // Onboarding, introduction
  GENERAL // Regular discussions
  ANNOUNCEMENT // Official updates
  RESOURCE // Knowledge sharing
  HELP_DESK // Support tickets
  PROJECT // Project management
  LEARNING // Educational content
  MENTORSHIP // Mentoring programs
  SOCIAL // Community engagement
  CAREER
}

enum OrganizationAccessType {
  PRIVATE
  PUBLIC
  INVITE_ONLY
}

enum CardStatus {
  TODO
  IN_PROGRESS
  DONE
}
